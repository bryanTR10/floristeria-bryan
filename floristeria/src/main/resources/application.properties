 spring.application.name=activity

# Configuración del servidor
server.port=8080
# Puerto en el que la aplicación escuchará las solicitudes HTTP. El valor por defecto es 8080.

server.servlet.context-path=/miapp
# Ruta de contexto de la aplicación. La URL de la aplicación será algo como http://localhost:8080/miapp

# Configuración de la base de datos
spring.datasource.url=jdbc:mysql://localhost:3306/mvcgr1
# URL de conexión a la base de datos MySQL. Asegúrate de que el puerto y el nombre de la base de datos sean correctos.

spring.datasource.username=usermvc
# Nombre de usuario para la base de datos.

spring.datasource.password=123456
# Contraseña para el usuario de la base de datos.

# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# Clase del controlador JDBC para MySQL. Cambia esto si usas otro tipo de base de datos.

# Configuración de JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
# Configuración para la gestión de esquema de base de datos. 'update' actualizará el esquema sin eliminar datos.
# Otros valores posibles son 'create', 'create-drop', y 'validate'.

spring.jpa.show-sql=true
# Mostrar las consultas SQL en la consola. Esto es útil para depuración.

# Configuración de logging
logging.level.org.springframework=INFO
# Establece el nivel de log para el paquete de Spring Framework. Puedes ajustar el nivel (DEBUG, INFO, WARN, ERROR) según tus necesidades.

# Configuración del perfil activo
spring.profiles.active=dev
# Especifica el perfil de configuración activo. Los perfiles permiten definir diferentes configuraciones para distintos entornos (dev, test, prod).

# Configuración de CORS (Cross-Origin Resource Sharing)
# Permite solicitudes desde cualquier origen. Asegúrate de ajustar esto en un entorno de producción para mejorar la seguridad.
# spring.web.cors.allowed-origins=*

